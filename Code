import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
def generate_books(n):
    genres = ["Fiction", "Non-fiction", "Fantasy", "science fiction", "Biography"]
    books = []
    for i in range(n):
        book = {
            "BookID": f"book-{i+1}",
            "Title": f"book title {i+1}",
            "Author": f"author {random.randint(1,100)}",
            "Genre": random.choice(genres),
            "PublicationDate": (datetime.now() - timedelta(days=random.randint(1,365*20))).strftime("%Y-%m-%d")
        }
        books.append(book)
    return pd.DataFrame(books)

def generate_borrowers(n):
    borrowers = []
    for i in range(n):
        borrower = {
            "MemberID": f"member-{i+1}",
            "Name": f"member name {random.randint(1,100)}",
            "registrationdate": (datetime.now() - timedelta(days=random.randint(1,365*20))).strftime("%Y-%m-%d"),
            "contactdetails": f"{random.randint(100,999)}-555-{random.randint(1000,9999)}"
        }
        borrowers.append(borrower)
    return pd.DataFrame(borrowers)

def generate_transactions(books_df,borrowers_df,n):
    transactions = []
    for i in range(n):
        borrow_date = datetime.now() - timedelta(days=random.randint(1,365))
        due_date = borrow_date + timedelta(days=random.randint(7,21))
        return_date = borrow_date + timedelta(days=random.randint(7,25)) if random.random() < 0.8 else None
        transaction = {
            "TransactionID": f"transaction-{i+1}",
            "BookID": random.choice(books_df['BookID'].values),
            "MemberID": random.choice(borrowers_df['MemberID'].values),
            "BorrowDate": borrow_date.strftime("%Y-%m-%d"),
            "DueDate": due_date.strftime("%Y-%m-%d"),
            "ReturnDate": return_date.strftime("%Y-%m-%d") if return_date else None
        }
        transactions.append(transaction)
    return pd.DataFrame(transactions)
books_df = generate_books(100)
borrowers_df = generate_borrowers(100)
transactions_df = generate_transactions(books_df, borrowers_df, 100)

books_df.to_csv('books.csv', index=False)
borrowers_df.to_csv('borrowers.csv', index=False)
transactions_df.to_csv('transactions.csv', index=False)

import sqlite3
conn = sqlite3.connect('library_system.db')
cur = conn.cursor()
cur.execute('''
CREATE TABLE IF NOT EXISTS Books (
    Book_ID TEXT PRIMARY KEY,
    Title TEXT,
    Author TEXT,
    Genre TEXT,
    Publication_Date TEXT
)''')

cur.execute('''
CREATE TABLE IF NOT EXISTS Borrowers (
    Member_ID TEXT PRIMARY KEY,
    Name TEXT,
    Registration_Date TEXT,
    Contact_Details TEXT
)''')

cur.execute('''
CREATE TABLE IF NOT EXISTS Transactions (
    Transaction_ID TEXT PRIMARY KEY,
    Book_ID TEXT,
    Member_ID TEXT,
    Borrow_Date TEXT
    Due_Date TEXT,
    Return_Date TEXT,
    FOREIGN KEY (Book_ID) REFERENCES Books(Book_ID),
    FOREIGN KEY (Member_ID) REFERENCES Borrowers(Member_ID)
)''')

books_df.to_sql('Books', conn, if_exists = 'replace', index=False)
borrowers_df.to_sql('Borrowers', conn, if_exists = 'replace', index=False)
transactions_df.to_sql('Transactions', conn, if_exists = 'replace', index=False)

conn.commit()

#column names
print(transactions_df.columns)

#highest borrowed books
query ='''
SELECT b.Title, COUNT(t.TransactionID) AS Borrow_Count
FROM Transactions t
JOIN Books b ON t.BookID = b.BookID
GROUP BY b.BookID
ORDER BY Borrow_Count DESC
LIMIT 10
'''

top_books = pd.read_sql(query,conn)
print("Top Borrowed Books:")
print(top_books)

#Borrowing trends
query_monthly_borrowing = '''
SELECT strftime('%m', BorrowDate) AS Month, COUNT(TransactionID) as Borrow_Count
FROM Transactions
GROUP BY Month
ORDER BY Month
'''

monthly_borrowing = pd.read_sql(query_monthly_borrowing,conn)
print("Borrowing trends by month:")
print(monthly_borrowing)

import matplotlib.pyplot as plt

transactions_df['BorrowDate'] = pd.to_datetime(transactions_df['BorrowDate'])
transactions_df['Month'] = transactions_df['BorrowDate'].dt.strftime('%b')



month_order=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

monthly_borrowing = transactions_df.groupby('Month').size().reset_index(name='Borrow_Count')

monthly_borrowing['Month'] = pd.Categorical(
    monthly_borrowing['Month'],
    categories=month_order,
    ordered=True
)
monthly_borrowing = monthly_borrowing.sort_values('Month')

plt.bar(monthly_borrowing['Month'], monthly_borrowing['Borrow_Count'])
plt.title('Monthly borrowing trends')
plt.xlabel('month')
plt.ylabel('number of borrows')
plt.show()

#Predictive Modeling
transactions_df['Late_Return'] = transactions_df.apply(
    lambda row: 1 if row['ReturnDate'] and row['ReturnDate']> row['DueDate'] else 0, axis = 1)

x=pd.get_dummies(transactions_df[['BookID','MemberID']], drop_first=True)
y=transactions_df['Late_Return']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state = 42)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

model = LogisticRegression(max_iter=1000)
model.fit(X_train,y_train)

y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)[:,1]

print(f"accuracy of overdue return prediction: {accuracy_score(y_test,y_pred):.2f}")
print("Classification Report:")
print(classification_report(y_test,y_pred, zero_division=0))
